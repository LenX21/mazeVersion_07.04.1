import string


import re



def first_word(text: str) -> str:
    return re.search("([\w']+)", text).group(1)


def second_attempt(text: str) -> str:
    for char in ',.':
        text = text.replace(char, ' ').strip()
    text = text.split(' ')
    return text[0]
def findOccurrence(word: list) -> str:
    occurrence = None
    try:
        firstPlace = word[0].index(word[1])
        occurrence = word[0].index(word[1], firstPlace+1)
    except ValueError:
        pass
    print(occurrence)
    return occurrence

def betweenMarkers(text: str, symbolStart: str, symbolEnd: str) -> str:
    """
    :param text:
    :param symbolstart:
    :param symbolEnd:
    :return:

    You are given a string and two markers (the initial and final).
    You have to find a substring enclosed between these two markers. But there are a few important conditions:
    """

    try:
        first = text.index(symbolStart) + len(symbolStart)
    except ValueError:
        first = 0
    try:
        last = text.index(symbolEnd)
    except ValueError:
        last = len(text)

    print(text[first:last])

def bestStock(best_stock: dict):

    print (max(best_stock, key=best_stock.get))


def getItem(dictName: dict, keysName: str):
    return dictName[keysName]

def allwords(text: str, popwords: list):

    allwords = text.strip().split(' ')
    print(allwords)
    allword2 = []
    allword4 = {}

    for i in allwords:
        if i.isalpha():
            allword2.append(i)

    allword3 = [ items.lower().splitlines() for items in text.strip().lower().split(' ') if items.isalpha() ]
    print(allword3)
    for i in popwords:
        allword4[i] = allword3.count(i)

    print(allword4)

    allword5 = {key: allword3.count(key) for key in popwords}
    import json
    print(allword5)
    print(json.dumps(allword5, indent=4))

def popular_words(text: str, words: list) -> dict:

    allwords = [ items.lower() for items in text.replace('\n', ' ').strip().split(' ') ]
    result = {key: allwords.count(key) for key in words}
    return result


def biggerPrice(amount: int, items: list):
    result = sorted(items, key= lambda x: x['price'], reverse=True)
    print(result[0:amount])

def mostNumbers(*args):
    """
    Input: An arbitrary number of arguments as numbers (int, float).
    Output: The difference between maximum and minimum as a number (int, float).
    :return:
    """
    try:
        result = max(args) - min(args)
    except ValueError:
        result = 0

    print(round(result, 1))

def evenTheLast(numbers: list):
    """
    You should find the sum of the elements with even indexes (0th, 2nd, 4th...)
    then multiply this summed number and the final element of the array together.
    :param numbers:
    :return:
    """
    result = 0
    print(len(numbers))
    if len(numbers) > 0:
        result = sum(numbers[0::2])*numbers[-1]
    print(f'Result {result}')

def secretMessage(text: str):
    """
    You are given a chunk of text.
    Gather all capital letters in one word in the order that they appear in the text.
    :param text:
    :return:
    """
    result = [x for x in text if x.isupper()]
    return ''.join(result)


def threeWords_test1(text: str):
    """
    You are given a string with words and numbers separated by whitespaces (one space).
    The words contains only letters. You should check if the string contains three words in succession.
    For example, the string "start 5 one two three 7 end" contains three words in succession.
    :param text:
    :return:
    """
    newtext = text.split(" ")
    counter = 0
    result = False
    while counter < len(newtext)-2 and len(newtext) >= 3:
        result = ''.join(newtext[counter:counter+3]).isalpha()
        if result:
            break
        counter += 1
    print(result)

def threeWords(text: str):
    """
    You are given a string with words and numbers separated by whitespaces (one space).
    The words contains only letters. You should check if the string contains three words in succession.
    For example, the string "start 5 one two three 7 end" contains three words in succession.

    :param text:
    :return:
    """
    newtext = text.split(" ")
    counter = 0
    for x in newtext:
        if x.isalpha():
            counter += 1
            if counter >= 3:
                return True
        else:
            counter = 0
    return False

def indexPower(arrayL: list, indexI: int):
    """
    You are given an array with positive numbers and a number N.
    You should find the N-th power of the element in the array with the index N.
    If N is outside of the array, then return -1.
    Don't forget that the first element has the index 0.

    :param arrayL:
    :param indexI:
    :return:
    """
    try:
        return pow(arrayL[indexI], indexI)
    except IndexError:
        return -1
def rightToLeft(instructions: set):
    """
    You are given a sequence of strings.
    You should join these strings into chunk of text where the initial strings are separated by commas.
    As a joke on the right handed robots, you should replace all cases of the words "right" with the word "left",
    even if it's a part of another word. All strings are given in lowercase.
    :param instructions:
    :return:
    """
    return (','.join(instructions).replace('right', 'left'))

def digitsMultiplication_1(num: int):

    newInt = [x for x in str(num) if x != '0']
    result = 1
    for x in newInt:
        result = int(x)*result
    print(result)

def digitsMultiplication(num: int):
    result = 1
    for y in str(num):
        if y == '0': continue
        result = result * int(y)
    print(result)

def absoluteSorting(array: set):
    print(sorted(array, key = lambda x: x*(-1) if x < 0 else x ))

def theMostFrequent(array: list):
    """
        determines the most frequently occurring string in the sequence.
    """
    print(sorted(array, key= lambda e: array.count(e), reverse=True)[0])
    print(sorted(array.count(e) for e in array)[0])

def easyUnpack(array: set):
    """
    Your mission here is to create a function that gets an tuple
    and returns a tuple with 3 elements - first, third and second
    to the last for the given array

    :param array:
    :return:
    """
    return array[0], array[2], array[len(array)-2]

def baseNumbers(item: str, radix: int):
    try:
        return int(item, radix)
    except ValueError:
        return -1

def theMostWantedLetter_1(text: str):
    print('*'*6)
    textnew = [y for y in text.lower() if y.isalpha()]
    print(text.lower().isalpha())
    print('*'*6)
    result = sorted(text.lower(), key=lambda x: text.count(x) if x.isalpha() else 0, reverse=True)[0]
    print(result)
    dicttext = {}
    for y in textnew:
        if y not in dicttext:
            dicttext[y] = textnew.count(y)
    print(dicttext)

def theMostWantedLetter(text: str):
    """
    You are given a text, which contains different english letters and punctuation symbols.
    You should find the most frequent letter in the text. The letter returned must be in lower case.
    While checking for the most wanted letter, casing does not matter, so for the purpose of your search,
    "A" == "a". Make sure you do not count punctuation symbols, digits and whitespaces, only letters.

    If you have two or more letters with the same frequency,
    then return the letter which comes first in the latin alphabet.
    For example -- "one" contains "o", "n", "e" only once for each, thus we choose "e".

    :param text:
    :return:
    """
    textnew = sorted(text.lower())
    result = sorted(textnew, key=lambda x: textnew.count(x) if x.isalpha() else 0, reverse=True)[0]
    return result

def monkeyTyping(text: str, words: list):
    count = 0
    for y in words:
        if text.lower().find(y) != -1:
            count += 1
    return count


def theLongRepeat_Home(text: str):
    for y, value in enumerate(text):
        counter = 0
        if value == text[y] and y < len(text):
            counter += 1
        print(f'{y} : {value} - Counter: {counter}')
        print("*"*4)
    count = 0
    result = 1
    maxresult = 0
    print(len(text))
    while count < len(text)-1:
        if text[count] == text[count+1]:
            result += 1
        else:
            if maxresult < result:
                maxresult= result
            result = 1
        count += 1
    print(f'Max {maxresult}')

class LongRepeat_HomeSection():

    def __init__(self, text):
        self.line = text

    def counterletter(self):
        counter = 0
        result = 0
        if len(self.line) > 0:
            previous = self.line[0]
            for i in self.line:
                if previous == i:
                    counter += 1
                    #print(f'Counter: {counter}')
                else:
                    counter = 1
                previous = i

                if result < counter:
                    result = counter
        return result

class AllTheSame():
    def __init__(self, array: list):
        self.array = array

    def checkvalues(self):
        counter = 0
        if len(self.array) > 0:
            previous = self.array[0]
            for i in self.array:
                if previous == i:
                    counter += 1
                else:
                    counter = 0
    #    print(f'Array len {len(self.array)}')
        if counter == len(self.array):
            return True
        else:
            return False


"""
The password will be considered strong enough if its length is greater than or equal to 10 symbols,
it has at least one digit, as well as containing one uppercase letter and one lowercase letter in it.
The password contains only ASCII latin letters or digits.
"""
class HousePassword():
    """
    The password will be considered strong enough if its length is greater than or equal to 10 symbols,
    it has at least one digit, as well as containing one uppercase letter and one lowercase letter in it.
    The password contains only ASCII latin letters or digits.
    """
    def __init__(self, password: str):
        self.password = password

    def countlength(self):
        """
        Count length of password
        :return:
        """
        return len(self.password) >= 10

    def anydigit(self):
        for i in self.password:
            if i.isdigit():
                return True
        return False

    def anyupper(self):
        for i in self.password:
            if i.isupper():
                return True
        return False

    def anylower(self):
        for i in self.password:
            if i.islower():
                return True
        return i.islower()

    def verification(self):
        return all( [self.countlength(), self.anydigit(), self.anylower(), self.anyupper()])


class CaesarCipherDecriptor():
    """
    Your mission is to encrypt a secret message (text only, without special chars like "!", "&", "?" etc.)
    using Caesar cipher where each letter of input text is replaced by another that stands at a fixed distance.
    For example ("a b c", 3) == "d e f"
    """
    import string

    def __init__(self, possition: int):
        self.pos = possition
        self.min_index = ord('a')
        self.max_index = ord('z')+1
        self.letters = [chr(i) for i in range(self.min_index, self.max_index)]

    def decryption(self, encrypted: str):
        decrypted = ''
        for i in encrypted:
            if i != " ":
                index = self.letters.index(i)
                newindex = index - self.pos
                if (newindex < 0, newindex > len(self.letters)):
                    newindex = newindex % len(self.letters)

                decrypted = decrypted + self.letters[newindex]
            else:
                decrypted = decrypted + " "

        return decrypted

    def encryption(self, words: str):
        #encryptedword = ''
        encryptedword2 = ''

        #print(([chr(i) for i in range(ord('a'), ord('z')+1)]))
        #letters = [chr(i) for i in range(self.min_index, self.max_index)]

        for i in words:
            if i != ' ':
                index = self.letters.index(i)
                newindex = index + self.pos
                if (newindex > len(self.letters), newindex < 0 ):
                    newindex = newindex % len(self.letters)

                #encryptedword = encryptedword+(chr(ord(i)+self.pos))

                #print(f'Letter: {i} index: {index} -> {newindex}')
                encryptedword2 = encryptedword2 + self.letters[newindex]
            else:
                #encryptedword = encryptedword+' '
                encryptedword2 = encryptedword2 + ' '
        #print(encryptedword)
        return encryptedword2

class SunAngle():

    """
    Your task is to find the angle of the sun above the horizon knowing the time of the day.
    Input data: the sun rises in the East at 6:00 AM, which corresponds to the angle of 0 degrees.
    At 12:00 PM the sun reaches its zenith, which means that the angle equals 90 degrees.
    6:00 PM is the time of the sunset so the angle is 180 degrees.
    If the input will be the time of the night (before 6:00 AM or after 6:00 PM),
    your function should return - "I don't see the sun!".
    """
    def time(self, gettime: str):
        from datetime import datetime, time

        print(gettime)
        newtime = [int(i) for i in gettime.split(":")]
        now = datetime.strptime(gettime,"%H:%M").time()

        print(now)
        if time(6,00) <= now <= time(18,00):
            print(now)
            print("It's a day")
        else:
            return "I don't see the sun!"

    def countangle(self, time: str):
        newtime = [int(i) for i in time.split(":")]
        currenttime = newtime[0]*60 + newtime[1]
        if 360 <= currenttime <= 1080:
            return (currenttime - 360)*0.25
        else:
            return "I don't see the sun!"











if __name__ == '__main__':
    #first_word("Text,!! with!! punctuations")
    #second_attempt("greetings, friends")
    #findOccurrence(['sims', ' '])
    #betweenMarkers ("<head><title>My new site</title></head>", "<title>", "</title>")

    #bestStock({'CAC': 10.0, 'ATX': 390.2, 'WIG': 1.2})
    #allwords('''
    #When I was One
    #I had just begun
    #When I was Two
    #I was nearly new
    #''', ['i', 'was', 'three', 'near'])

    #biggerPrice(1, [{"name": "water", "price": 1}, {"name": "wine", "price": 138}])
    #mostNumbers()
    #evenTheLast([])
    #assert secretMessage("How are you? Eh, ok. Low or Lower? Ohhh.") == "HELLO", "hello"
    #assert threeWords("Hello World hello") == True
    #threeWords('Hi')
    assert indexPower([1, 2], 3) == -1
    assert rightToLeft(("left", "right", "left", "stop")) == "left,left,left,stop", "All to left"
    #digitsMultiplication(123405)
    #absoluteSorting((-1, 2, -3, 0))
    #theMostFrequent(['a', 'a', 'bi', 'bi', 'bi', '7', '7', '7', '7'])
    assert easyUnpack((1, 2, 3, 4, 5, 6, 7, 9)) == (1,3,7)
    assert baseNumbers("Z", 36) == 35
    assert baseNumbers("AB", 10) == -1
    assert baseNumbers("AF", 16) == 175
    assert theMostWantedLetter("AAaooo!!!!") == 'a'
    assert monkeyTyping("Lorem ipsum dolor sit amet, consectetuer adipiscing elit.",
            {"sum", "hamlet", "infinity", "anything"}) == 1
    obj = LongRepeat_HomeSection('aa')
    assert obj.counterletter() == 2
    allthesame = AllTheSame([])
    assert allthesame.checkvalues() == True
    checkpassword = HousePassword('QwErTy911poqqqq')
    assert checkpassword.verification() == True
    caesar = CaesarCipherDecriptor(16)
    assert caesar.encryption("simple text") == "iycfbu junj"
    assert caesar.decryption("iycfbu junj") == "simple text"
    caesar2 = CaesarCipherDecriptor(-3)
    assert caesar2.encryption("a b c") == "x y z"
    assert caesar2.decryption("x y z") == "a b c"
    sunagle = SunAngle()
    sunagle.countangle('12:15')



