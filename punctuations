import string


import re



def first_word(text: str) -> str:
    return re.search("([\w']+)", text).group(1)


def second_attempt(text: str) -> str:
    for char in ',.':
        text = text.replace(char, ' ').strip()
    text = text.split(' ')
    return text[0]
def findOccurrence(word: list) -> str:
    occurrence = None
    try:
        firstPlace = word[0].index(word[1])
        occurrence = word[0].index(word[1], firstPlace+1)
    except ValueError:
        pass
    print(occurrence)
    return occurrence

def betweenMarkers(text: str, symbolStart: str, symbolEnd: str) -> str:
    """
    :param text:
    :param symbolstart:
    :param symbolEnd:
    :return:

    You are given a string and two markers (the initial and final).
    You have to find a substring enclosed between these two markers. But there are a few important conditions:
    """

    try:
        first = text.index(symbolStart) + len(symbolStart)
    except ValueError:
        first = 0
    try:
        last = text.index(symbolEnd)
    except ValueError:
        last = len(text)

    print(text[first:last])

def bestStock(best_stock: dict):

    print (max(best_stock, key=best_stock.get))


def getItem(dictName: dict, keysName: str):
    return dictName[keysName]

def allwords(text: str, popwords: list):

    allwords = text.strip().split(' ')
    print(allwords)
    allword2 = []
    allword4 = {}

    for i in allwords:
        if i.isalpha():
            allword2.append(i)

    allword3 = [ items.lower().splitlines() for items in text.strip().lower().split(' ') if items.isalpha() ]
    print(allword3)
    for i in popwords:
        allword4[i] = allword3.count(i)

    print(allword4)

    allword5 = {key: allword3.count(key) for key in popwords}
    import json
    print(allword5)
    print(json.dumps(allword5, indent=4))

def popular_words(text: str, words: list) -> dict:

    allwords = [ items.lower() for items in text.replace('\n', ' ').strip().split(' ') ]
    result = {key: allwords.count(key) for key in words}
    return result


def biggerPrice(amount: int, items: list):
    result = sorted(items, key= lambda x: x['price'], reverse=True)
    print(result[0:amount])

def mostNumbers(*args):
    """
    Input: An arbitrary number of arguments as numbers (int, float).
    Output: The difference between maximum and minimum as a number (int, float).
    :return:
    """
    try:
        result = max(args) - min(args)
    except ValueError:
        result = 0

    print(round(result, 1))

def evenTheLast(numbers: list):
    """
    You should find the sum of the elements with even indexes (0th, 2nd, 4th...)
    then multiply this summed number and the final element of the array together.
    :param numbers:
    :return:
    """
    result = 0
    print(len(numbers))
    if len(numbers) > 0:
        result = sum(numbers[0::2])*numbers[-1]
    print(f'Result {result}')




if __name__ == '__main__':
    #first_word("Text,!! with!! punctuations")
    #second_attempt("greetings, friends")
    #findOccurrence(['sims', ' '])
    betweenMarkers ("<head><title>My new site</title></head>", "<title>", "</title>")
    bestStock({
    'CAC': 10.0,
    'ATX': 390.2,
    'WIG': 1.2})
    allwords('''
    When I was One
    I had just begun
    When I was Two
    I was nearly new
    ''', ['i', 'was', 'three', 'near'])

    biggerPrice(1, [{"name": "water", "price": 1}, {"name": "wine", "price": 138}])
    mostNumbers()
    evenTheLast([])
